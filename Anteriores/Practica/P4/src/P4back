#include <stdio.h>
#define MAXDIM 20
#define M 4
#define P 5
#define TRUE 1
#define FALSE 0
#define INFINITO 9999


typedef struct{
  int D; 
  int C; 
  int actual;
  int camino[MAXDIM]; 
  int cantidad[M]; 
}TSol; 


int accesible( int Dist[P-1][P-1], int T, int i, int j, int origen){ /*accesible (Dist, T, actual, pi, origen)*/
  int acc=FALSE; 
  if((Dist[i][j]+Dist[j][origen])<=T)
    acc=TRUE;
  return acc;
}

void BarcosDin(TSol sol, TSol SolOpt, int Dist[P-1][P-1], int Merc[P][M], int T){

  int mejor=-1, maux=INFINITO,  i, j; 
  if(T==0){
    SolOpt=sol;
  }
  else{
    /* 1º - Vender mercancía */
    for(i=0; i<M; i++){
      if(sol.cantidad[i]>0){
	sol.D = (sol.cantidad[i])*(Merc[sol.actual][i]); 
	sol.C += sol.cantidad[i]; 
	sol.cantidad[i]=0; 
      }
    }
    /* 2º - Comprar nueva mercancía */
    /*   2.1 - Seleccionar la más barata */
    for(i=0; i<M; i++){
      if(Merc[sol.actual][i] < maux){
	mejor=i; 
	maux=Merc[sol.actual][i]; 
      }
    }
    /* 2.2 - Comprarla hasta donde llegue la capacidad o el presupuesto*/
    for(i=0; (i<sol.C); i++){
      if(sol.D > maux){   /* control de que no nos pasemos del presupuesto */
      sol.D -= maux;
      sol.C--; 
      }
      else
	i=sol.C;
    }

    /* 3º - Buscar nueva ruta */

    TSol solaux=sol; /* guardamos el estado actual */
    if(T == Dist[sol.actual][sol.camino[0]]){
      BarcosDin(sol, SolOpt, Dist, Merc, 0); /* Si la distancia es la justa para volver, volvemos */
    }
    else{
      for(i=0; i<P; i++){
	if((i!= sol.actual) && accesible(Dist, T, sol.actual, i, sol.camino[0])==TRUE){
	  sol.actual=i; /*posición actual cambiada */
	  for(j=0; j<MAXDIM; j++){ /*actualizamos el camino */
	    if(sol.camino[j]==-1){
	      sol.camino[j]=i; 
	      j=MAXDIM;
	    }
	  }
	  BarcosDin(sol, SolOpt, Dist, Merc, T - (Dist[sol.actual][i])); 
	  if(sol.D > solaux.D) SolOpt=sol; 
	  else SolOpt=solaux; 
	}
      }
    }
  }
}

void main(){
  FILE *fichero;
  int C, T, D,  valor, i; 
  char cad[2]; 
  int origen, destino; 
  int camino[MAXDIM];
  TSol Solucion, SolOpt; 

  for(i=0; i<MAXDIM-1; i++)
    camino[i]=-1; 
 
  if((fichero=fopen("DatosP4Barco.txt", "r"))==NULL)
    printf("Error al abrir fichero\n");
  else
    printf("\nFichero de datos abierto\n");

  printf("Teclee el puerto de origen\n");
  scanf("%d", &origen); 
  destino=origen;
  printf("Teclee el capital inicial\n");
  scanf("%d",&D);
  printf("Teclee el número de días\n");
  scanf("%d",&T);
  printf("D: %d\tT: %d\n\n", D, T);

  while(!feof(fichero)){
    fscanf(fichero, "%c\t\t %d\n",&cad[0], &valor);

    if(cad[0]=='C') 
      C = valor; 
/*  if(cad[0]=='M') Aquí da fallo al leer del archivo 
      M = valor; */ 
  }
  printf("C: %d\tP: %d\tM: %d\n\n", C, P, M);
  int cant[M]; 
  for(i=0; i<M; i++) /* cantidad inicial de cada mercancía es 0 */
    cant[i]=0;  

  int Dist[P-1][P-1]; 
  int Merc[P][M]; 
  int auxd[P-1];

  Dist[0][0]=3;   Dist[0][1]=3;   Dist[0][2]=2;   Dist[0][3]=6; 
  Dist[1][0]=3;   Dist[1][1]=2;   Dist[1][2]=4;   Dist[1][3]=1;
  Dist[2][0]=2;   Dist[2][1]=4;   Dist[2][2]=5;   Dist[2][3]=3; 
  Dist[3][0]=6;   Dist[3][1]=1;   Dist[3][2]=3;   Dist[3][3]=4; 

  for(i=0; i<P-1; i++)
    printf("P%d-Pi\t%d\t%d\t%d\t%d\n", i+1, Dist[i][0], Dist[i][1], Dist[i][2], Dist[i][3]);  

  Merc[0][0]=10; Merc[0][1]=8; Merc[0][2]=5; Merc[0][3]=3; 
  Merc[1][0]=6; Merc[1][1]=7; Merc[1][2]=11; Merc[1][3]=15; 
  Merc[2][0]=8; Merc[2][1]=4; Merc[2][2]=3; Merc[2][3]=6; 
  Merc[3][0]=2; Merc[3][1]=12; Merc[3][2]=10; Merc[3][3]=7; 
  Merc[4][0]=4; Merc[4][1]=5; Merc[4][2]=6; Merc[4][3]=8; 

  for(i=0; i<P; i++)
    printf("\nM-P%d\t%d\t%d\t%d\t%d", i+1, Merc[i][0], Merc[i][1], Merc[i][2], Merc[i][3]);  

  printf("\n"); 
  fclose(fichero);

  /* primera llamada */

  Solucion.C = C; 
  Solucion.D = D; 
  Solucion.camino[0]=origen; 
  Solucion.actual=origen;
  for(i=1; i<MAXDIM; i++)
    Solucion.camino[i]=-1;
  for(i=0; i<M; i++)
    Solucion.cantidad[i]=0; 
  SolOpt=Solucion;
  BarcosDin(Solucion, SolOpt, Dist, Merc, T); 

  printf("==Solución==\nD: %d\nC: %d\nRuta: ",SolOpt.D, SolOpt.C); 
  for(i=0; i< MAXDIM; i++)
    if(SolOpt.camino[i] >= 0)
      printf("%d\t", SolOpt.camino[i]);
  printf("\n\n"); 
} /* FIN */



/* Estructuras de datos: 

<TSol>
  D : Presupuesto
  C : Capacidad
  actual: Puerto actual
  camino[]: arreglo de camino seguido
  cantidad[]: arreglo de cantidad de cada mercancía Mi   i=0...M


<Distancia entre el puerto i y puerto j>
  Dist[P-1][P-1]

<Precio de las mercancías i en el puerto j>
  Merc[P][M]

*/












